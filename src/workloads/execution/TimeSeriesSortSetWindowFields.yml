SchemaVersion: 2018-07-01
Owner: "@mongodb/query"
Description: |
  This test exercises the behavior of the time series bounded sorter with many overlapping buckets,
  forcing the sort to spill to disk. We test from 1,000 overlapping buckets to 10,000 overlapping
  buckets.


GlobalDefaults:
  dbname: &db test
  coll: &coll Collection0
  bucketsColl: &bucketsColl system.buckets.Collection0
  batchSize: &batchSize 30000
  fieldName: &field "numeric"
  index: &index
    keys: {numeric: 1}
  nop: &Nop {Nop: true}

BlockingSortCmd: &BlockingSortCmd
  LoadConfig:
    Path: "../../phases/execution/TimeSeriesSortSetWindowFieldCommands.yml"
    Key: BlockingSortCmdTemplate
    Parameters:
      coll: *coll
      batchSize: *batchSize

BoundedSortCmd: &BoundedSortCmd
  LoadConfig:
    Path: "../../phases/execution/TimeSeriesSortSetWindowFieldCommands.yml"
    Key: BoundedSortCmdTemplate
    Parameters:
      coll: *bucketsColl
      batchSize: *batchSize

Actors:
- Name: CreateTimeSeriesCollection
  Type: RunCommand
  Threads: 1
  Phases:
  - &CreateCollection
    Repeat: 1
    Database: *db
    Operation:
      OperationMetricsName: CreateTimeSeriesCollection
      OperationName: RunCommand
      OperationCommand:
        {create: *coll, timeseries: {timeField: "t", metaField: "m"}}
  - *Nop
  - *Nop
  - *Nop
  - *Nop
  - *Nop
  - &DropCollection
    Repeat: 1
    Database: test
    Operations:
    - OperationName: RunCommand
      OperationCommand:
        drop: *coll

  - *CreateCollection
  - *Nop
  - *Nop
  - *Nop
  - *Nop
  - *Nop
  - *DropCollection

  - *CreateCollection
  - *Nop
  - *Nop
  - *Nop
  - *Nop
  - *Nop
  - *DropCollection

  - *CreateCollection
  - *Nop
  - *Nop
  - *Nop
  - *Nop
  - *Nop
  - *DropCollection

  - *CreateCollection
  - *Nop
  - *Nop
  - *Nop
  - *Nop
  - *Nop
  - *DropCollection

  - *CreateCollection
  - *Nop
  - *Nop
  - *Nop
  - *Nop
  - *Nop
  - *DropCollection

  - *CreateCollection
  - *Nop
  - *Nop
  - *Nop
  - *Nop
  - *Nop
  - *DropCollection

  - *CreateCollection
  - *Nop
  - *Nop
  - *Nop
  - *Nop
  - *Nop
  - *DropCollection

  - *CreateCollection
  - *Nop
  - *Nop
  - *Nop
  - *Nop
  - *Nop
  - *DropCollection

  - *CreateCollection
  - *Nop
  - *Nop
  - *Nop
  - *Nop
  - *Nop
  - *DropCollection

- Name: Quiesce
  Type: QuiesceActor
  Threads: 1
  Database: *db
  Phases:
  - *Nop
  - *Nop
  - Repeat: 1
  - *Nop
  - Repeat: 1
  - *Nop
  - *Nop

  - *Nop
  - *Nop
  - Repeat: 1
  - *Nop
  - Repeat: 1
  - *Nop
  - *Nop

  - *Nop
  - *Nop
  - Repeat: 1
  - *Nop
  - Repeat: 1
  - *Nop
  - *Nop

  - *Nop
  - *Nop
  - Repeat: 1
  - *Nop
  - Repeat: 1
  - *Nop
  - *Nop

  - *Nop
  - *Nop
  - Repeat: 1
  - *Nop
  - Repeat: 1
  - *Nop
  - *Nop

  - *Nop
  - *Nop
  - Repeat: 1
  - *Nop
  - Repeat: 1
  - *Nop
  - *Nop

  - *Nop
  - *Nop
  - Repeat: 1
  - *Nop
  - Repeat: 1
  - *Nop
  - *Nop

  - *Nop
  - *Nop
  - Repeat: 1
  - *Nop
  - Repeat: 1
  - *Nop
  - *Nop

  - *Nop
  - *Nop
  - Repeat: 1
  - *Nop
  - Repeat: 1
  - *Nop
  - *Nop

  - *Nop
  - *Nop
  - Repeat: 1
  - *Nop
  - Repeat: 1
  - *Nop
  - *Nop

- Name: InsertData
  Type: Loader
  Threads: 1
  Phases:
  - *Nop
  - Repeat: 1
    Database: *db
    Collection: *coll
    Threads: 1
    CollectionCount: 1
    DocumentCount: 1001000  # insert 100 independent series, each series has 100 buckets
    BatchSize: *batchSize
    Document:
      # TODO maybe change the data/how overlapping it can be
      # t repeats each date 100 times [d1 d1 d1 d1... d2 d2 d2 d2 ...]
      t: {^Repeat: {count: 100, fromGenerator: {^IncDate: {start: "2022-01-01", step: 36000}}}}
      # m cycles through the meta values [0 1 2 ... 99 0 1 2 ... 99 0 1 2 ...]
      m: {^Cycle: {ofLength: 100, fromGenerator: {^Inc: {start: 0}}}}
      measurement: {^RandomInt: {min: 10, max: 20}}
  - *Nop
  - *Nop
  - *Nop
  - *Nop
  - *Nop

  - *Nop
  - Repeat: 1
    Database: *db
    Collection: *coll
    Threads: 1
    CollectionCount: 1
    DocumentCount: 2002000  # increase to 200 independent series, each series has 100 buckets
    BatchSize: *batchSize
    Document:
      t: {^Repeat: {count: 200, fromGenerator: {^IncDate: {start: "2022-01-01", step: 36000}}}}
      m: {^Cycle: {ofLength: 200, fromGenerator: {^Inc: {start: 0}}}}
  - *Nop
  - *Nop
  - *Nop
  - *Nop
  - *Nop

  - *Nop
  - Repeat: 1
    Database: *db
    Collection: *coll
    Threads: 1
    CollectionCount: 1
    DocumentCount: 3003000
    BatchSize: *batchSize
    Document:
      t: {^Repeat: {count: 300, fromGenerator: {^IncDate: {start: "2022-01-01", step: 36000}}}}
      m: {^Cycle: {ofLength: 300, fromGenerator: {^Inc: {start: 0}}}}
  - *Nop
  - *Nop
  - *Nop
  - *Nop
  - *Nop

  - *Nop
  - Repeat: 1
    Database: *db
    Collection: *coll
    Threads: 1
    CollectionCount: 1
    DocumentCount: 4004000
    BatchSize: *batchSize
    Document:
      t: {^Repeat: {count: 400, fromGenerator: {^IncDate: {start: "2022-01-01", step: 36000}}}}
      m: {^Cycle: {ofLength: 400, fromGenerator: {^Inc: {start: 0}}}}
  - *Nop
  - *Nop
  - *Nop
  - *Nop
  - *Nop

  - *Nop
  - Repeat: 1
    Database: *db
    Collection: *coll
    Threads: 1
    CollectionCount: 1
    DocumentCount: 5005000
    BatchSize: *batchSize
    Document:
      t: {^Repeat: {count: 500, fromGenerator: {^IncDate: {start: "2022-01-01", step: 36000}}}}
      m: {^Cycle: {ofLength: 500, fromGenerator: {^Inc: {start: 0}}}}
  - *Nop
  - *Nop
  - *Nop
  - *Nop
  - *Nop

  - *Nop
  - Repeat: 1
    Database: *db
    Collection: *coll
    Threads: 1
    CollectionCount: 1
    DocumentCount: 6006000
    BatchSize: *batchSize
    Document:
      t: {^Repeat: {count: 600, fromGenerator: {^IncDate: {start: "2022-01-01", step: 36000}}}}
      m: {^Cycle: {ofLength: 600, fromGenerator: {^Inc: {start: 0}}}}
  - *Nop
  - *Nop
  - *Nop
  - *Nop
  - *Nop

  - *Nop
  - Repeat: 1
    Database: *db
    Collection: *coll
    Threads: 1
    CollectionCount: 1
    DocumentCount: 7007000
    BatchSize: *batchSize
    Document:
      t: {^Repeat: {count: 700, fromGenerator: {^IncDate: {start: "2022-01-01", step: 36000}}}}
      m: {^Cycle: {ofLength: 700, fromGenerator: {^Inc: {start: 0}}}}
  - *Nop
  - *Nop
  - *Nop
  - *Nop
  - *Nop

  - *Nop
  - Repeat: 1
    Database: *db
    Collection: *coll
    Threads: 1
    CollectionCount: 1
    DocumentCount: 8008000
    BatchSize: *batchSize
    Document:
      t: {^Repeat: {count: 800, fromGenerator: {^IncDate: {start: "2022-01-01", step: 36000}}}}
      m: {^Cycle: {ofLength: 800, fromGenerator: {^Inc: {start: 0}}}}
  - *Nop
  - *Nop
  - *Nop
  - *Nop
  - *Nop

  - *Nop
  - Repeat: 1
    Database: *db
    Collection: *coll
    Threads: 1
    CollectionCount: 1
    DocumentCount: 9009000
    BatchSize: *batchSize
    Document:
      t: {^Repeat: {count: 900, fromGenerator: {^IncDate: {start: "2022-01-01", step: 36000}}}}
      m: {^Cycle: {ofLength: 900, fromGenerator: {^Inc: {start: 0}}}}
  - *Nop
  - *Nop
  - *Nop
  - *Nop
  - *Nop

  - *Nop
  - Repeat: 1
    Database: *db
    Collection: *coll
    Threads: 1
    CollectionCount: 1
    DocumentCount: 10010000
    BatchSize: *batchSize
    Document:
      t: {^Repeat: {count: 1000, fromGenerator: {^IncDate: {start: "2022-01-01", step: 36000}}}}
      m: {^Cycle: {ofLength: 1000, fromGenerator: {^Inc: {start: 0}}}}
  - *Nop
  - *Nop
  - *Nop
  - *Nop
  - *Nop

- Name: Queries
  Type: RunCommand
  Threads: 1
  Phases:
  - *Nop
  - *Nop
  - *Nop
  - Repeat: &numQueryRuns 50
    Database: *db
    Operations:
    - OperationMetricsName: SortQuerySpillBlockingSort1Mil
      OperationName: RunCommand
      OperationCommand: *BlockingSortCmd
  - *Nop
  - Repeat: *numQueryRuns
    Database: *db
    Operations:
    - OperationMetricsName: SortQuerySpillBoundedSort1Mil
      OperationName: RunCommand
      OperationCommand: *BoundedSortCmd
  - *Nop

  - *Nop
  - *Nop
  - *Nop
  - Repeat: *numQueryRuns
    Database: *db
    Operations:
    - OperationMetricsName: SortQuerySpillBlockingSort2Mil
      OperationName: RunCommand
      OperationCommand: *BlockingSortCmd
  - *Nop
  - Repeat: *numQueryRuns
    Database: *db
    Operations:
    - OperationMetricsName: SortQuerySpillBoundedSort2Mil
      OperationName: RunCommand
      OperationCommand: *BoundedSortCmd
  - *Nop

  - *Nop
  - *Nop
  - *Nop
  - Repeat: *numQueryRuns
    Database: *db
    Operations:
    - OperationMetricsName: SortQuerySpillBlockingSort3Mil
      OperationName: RunCommand
      OperationCommand: *BlockingSortCmd
  - *Nop
  - Repeat: *numQueryRuns
    Database: *db
    Operations:
    - OperationMetricsName: SortQuerySpillBoundedSort3Mil
      OperationName: RunCommand
      OperationCommand: *BoundedSortCmd
  - *Nop

  - *Nop
  - *Nop
  - *Nop
  - Repeat: *numQueryRuns
    Database: *db
    Operations:
    - OperationMetricsName: SortQuerySpillBlockingSort4Mil
      OperationName: RunCommand
      OperationCommand: *BlockingSortCmd
  - *Nop
  - Repeat: *numQueryRuns
    Database: *db
    Operations:
    - OperationMetricsName: SortQuerySpillBoundedSort4Mil
      OperationName: RunCommand
      OperationCommand: *BoundedSortCmd
  - *Nop

  - *Nop
  - *Nop
  - *Nop
  - Repeat: *numQueryRuns
    Database: *db
    Operations:
    - OperationMetricsName: SortQuerySpillBlockingSort5Mil
      OperationName: RunCommand
      OperationCommand: *BlockingSortCmd
  - *Nop
  - Repeat: *numQueryRuns
    Database: *db
    Operations:
    - OperationMetricsName: SortQuerySpillBoundedSort5Mil
      OperationName: RunCommand
      OperationCommand: *BoundedSortCmd
  - *Nop

  - *Nop
  - *Nop
  - *Nop
  - Repeat: *numQueryRuns
    Database: *db
    Operations:
    - OperationMetricsName: SortQuerySpillBlockingSort6Mil
      OperationName: RunCommand
      OperationCommand: *BlockingSortCmd
  - *Nop
  - Repeat: *numQueryRuns
    Database: *db
    Operations:
    - OperationMetricsName: SortQuerySpillBoundedSort6Mil
      OperationName: RunCommand
      OperationCommand: *BoundedSortCmd
  - *Nop

  - *Nop
  - *Nop
  - *Nop
  - Repeat: *numQueryRuns
    Database: *db
    Operations:
    - OperationMetricsName: SortQuerySpillBlockingSort7Mil
      OperationName: RunCommand
      OperationCommand: *BlockingSortCmd
  - *Nop
  - Repeat: *numQueryRuns
    Database: *db
    Operations:
    - OperationMetricsName: SortQuerySpillBoundedSort7Mil
      OperationName: RunCommand
      OperationCommand: *BoundedSortCmd
  - *Nop

  - *Nop
  - *Nop
  - *Nop
  - Repeat: *numQueryRuns
    Database: *db
    Operations:
    - OperationMetricsName: SortQuerySpillBlockingSort8Mil
      OperationName: RunCommand
      OperationCommand: *BlockingSortCmd
  - *Nop
  - Repeat: *numQueryRuns
    Database: *db
    Operations:
    - OperationMetricsName: SortQuerySpillBoundedSort8Mil
      OperationName: RunCommand
      OperationCommand: *BoundedSortCmd
  - *Nop

  - *Nop
  - *Nop
  - *Nop
  - Repeat: *numQueryRuns
    Database: *db
    Operations:
    - OperationMetricsName: SortQuerySpillBlockingSort9Mil
      OperationName: RunCommand
      OperationCommand: *BlockingSortCmd
  - *Nop
  - Repeat: *numQueryRuns
    Database: *db
    Operations:
    - OperationMetricsName: SortQuerySpillBoundedSort9Mil
      OperationName: RunCommand
      OperationCommand: *BoundedSortCmd
  - *Nop

  - *Nop
  - *Nop
  - *Nop
  - Repeat: *numQueryRuns
    Database: *db
    Operations:
    - OperationMetricsName: SortQuerySpillBlockingSort10Mil
      OperationName: RunCommand
      OperationCommand: *BlockingSortCmd
  - *Nop
  - Repeat: *numQueryRuns
    Database: *db
    Operations:
    - OperationMetricsName: SortQuerySpillBoundedSort10Mil
      OperationName: RunCommand
      OperationCommand: *BoundedSortCmd
  - *Nop


AutoRun:
- When:
    mongodb_setup:
      $eq:
      - replica
      - replica-all-feature-flags
    branch_name:
      $neq:
      - v4.0
      - v4.2
      - v4.4
      - v5.0
      - v5.1
      - v5.2
      - v5.3
